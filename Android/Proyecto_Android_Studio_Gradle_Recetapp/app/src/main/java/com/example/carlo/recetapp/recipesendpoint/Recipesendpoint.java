/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2016-04-08 17:16:44 UTC)
 * on 2016-04-18 at 10:32:29 UTC 
 * Modify at your own risk.
 */

package com.example.carlo.recetapp.recipesendpoint;

/**
 * Service definition for Recipesendpoint (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link RecipesendpointRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */


@SuppressWarnings("javadoc")
public class Recipesendpoint extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.18.0-rc of the recipesendpoint library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://myapp.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "recipesendpoint/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Recipesendpoint(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Recipesendpoint(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "addIngredient".
   *
   * This request holds the parameters needed by the recipesendpoint server.  After setting any
   * optional parameters, call the {@link AddIngredient#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.example.carlo.recetapp.recipesendpoint.model.Ingredient}
   * @return the request
   */
  public AddIngredient addIngredient(com.example.carlo.recetapp.recipesendpoint.model.Ingredient content) throws java.io.IOException {
    AddIngredient result = new AddIngredient(content);
    initialize(result);
    return result;
  }

  public class AddIngredient extends RecipesendpointRequest<com.example.carlo.recetapp.recipesendpoint.model.Ingredient> {

    private static final String REST_PATH = "addIngredient";

    /**
     * Create a request for the method "addIngredient".
     *
     * This request holds the parameters needed by the the recipesendpoint server.  After setting any
     * optional parameters, call the {@link AddIngredient#execute()} method to invoke the remote
     * operation. <p> {@link AddIngredient#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param content the {@link com.example.carlo.recetapp.recipesendpoint.model.Ingredient}
     * @since 1.13
     */
    protected AddIngredient(com.example.carlo.recetapp.recipesendpoint.model.Ingredient content) {
      super(Recipesendpoint.this, "POST", REST_PATH, content, com.example.carlo.recetapp.recipesendpoint.model.Ingredient.class);
    }

    @Override
    public AddIngredient setAlt(String alt) {
      return (AddIngredient) super.setAlt(alt);
    }

    @Override
    public AddIngredient setFields(String fields) {
      return (AddIngredient) super.setFields(fields);
    }

    @Override
    public AddIngredient setKey(String key) {
      return (AddIngredient) super.setKey(key);
    }

    @Override
    public AddIngredient setOauthToken(String oauthToken) {
      return (AddIngredient) super.setOauthToken(oauthToken);
    }

    @Override
    public AddIngredient setPrettyPrint(Boolean prettyPrint) {
      return (AddIngredient) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public AddIngredient setQuotaUser(String quotaUser) {
      return (AddIngredient) super.setQuotaUser(quotaUser);
    }

    @Override
    public AddIngredient setUserIp(String userIp) {
      return (AddIngredient) super.setUserIp(userIp);
    }

    @Override
    public AddIngredient set(String parameterName, Object value) {
      return (AddIngredient) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "addRecipe".
   *
   * This request holds the parameters needed by the recipesendpoint server.  After setting any
   * optional parameters, call the {@link AddRecipe#execute()} method to invoke the remote operation.
   *
   * @param id
   * @param content the {@link com.example.carlo.recetapp.recipesendpoint.model.Recipe}
   * @return the request
   */
  public AddRecipe addRecipe(String id, com.example.carlo.recetapp.recipesendpoint.model.Recipe content) throws java.io.IOException {
    AddRecipe result = new AddRecipe(id, content);
    initialize(result);
    return result;
  }

  public class AddRecipe extends RecipesendpointRequest<com.example.carlo.recetapp.recipesendpoint.model.Recipe> {

    private static final String REST_PATH = "addRecipe/{id}";

    /**
     * Create a request for the method "addRecipe".
     *
     * This request holds the parameters needed by the the recipesendpoint server.  After setting any
     * optional parameters, call the {@link AddRecipe#execute()} method to invoke the remote
     * operation. <p> {@link
     * AddRecipe#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @param content the {@link com.example.carlo.recetapp.recipesendpoint.model.Recipe}
     * @since 1.13
     */
    protected AddRecipe(String id, com.example.carlo.recetapp.recipesendpoint.model.Recipe content) {
      super(Recipesendpoint.this, "PUT", REST_PATH, content, com.example.carlo.recetapp.recipesendpoint.model.Recipe.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public AddRecipe setAlt(String alt) {
      return (AddRecipe) super.setAlt(alt);
    }

    @Override
    public AddRecipe setFields(String fields) {
      return (AddRecipe) super.setFields(fields);
    }

    @Override
    public AddRecipe setKey(String key) {
      return (AddRecipe) super.setKey(key);
    }

    @Override
    public AddRecipe setOauthToken(String oauthToken) {
      return (AddRecipe) super.setOauthToken(oauthToken);
    }

    @Override
    public AddRecipe setPrettyPrint(Boolean prettyPrint) {
      return (AddRecipe) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public AddRecipe setQuotaUser(String quotaUser) {
      return (AddRecipe) super.setQuotaUser(quotaUser);
    }

    @Override
    public AddRecipe setUserIp(String userIp) {
      return (AddRecipe) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private String id;

    /**

     */
    public String getId() {
      return id;
    }

    public AddRecipe setId(String id) {
      this.id = id;
      return this;
    }

    @Override
    public AddRecipe set(String parameterName, Object value) {
      return (AddRecipe) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "addSpecificIngredientToRecipe".
   *
   * This request holds the parameters needed by the recipesendpoint server.  After setting any
   * optional parameters, call the {@link AddSpecificIngredientToRecipe#execute()} method to invoke
   * the remote operation.
   *
   * @param idRecipe
   * @param id
   * @param idIngredient
   * @param content the {@link com.example.carlo.recetapp.recipesendpoint.model.Ingrrecipe}
   * @return the request
   */
  public AddSpecificIngredientToRecipe addSpecificIngredientToRecipe(String idRecipe, String id, String idIngredient, com.example.carlo.recetapp.recipesendpoint.model.Ingrrecipe content) throws java.io.IOException {
    AddSpecificIngredientToRecipe result = new AddSpecificIngredientToRecipe(idRecipe, id, idIngredient, content);
    initialize(result);
    return result;
  }

  public class AddSpecificIngredientToRecipe extends RecipesendpointRequest<com.example.carlo.recetapp.recipesendpoint.model.Recipe> {

    private static final String REST_PATH = "addSpecificIngredientToRecipe/{id_recipe}/{id}/{id_ingredient}";

    /**
     * Create a request for the method "addSpecificIngredientToRecipe".
     *
     * This request holds the parameters needed by the the recipesendpoint server.  After setting any
     * optional parameters, call the {@link AddSpecificIngredientToRecipe#execute()} method to invoke
     * the remote operation. <p> {@link AddSpecificIngredientToRecipe#initialize(com.google.api.client
     * .googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param idRecipe
     * @param id
     * @param idIngredient
     * @param content the {@link com.example.carlo.recetapp.recipesendpoint.model.Ingrrecipe}
     * @since 1.13
     */
    protected AddSpecificIngredientToRecipe(String idRecipe, String id, String idIngredient, com.example.carlo.recetapp.recipesendpoint.model.Ingrrecipe content) {
      super(Recipesendpoint.this, "PUT", REST_PATH, content, com.example.carlo.recetapp.recipesendpoint.model.Recipe.class);
      this.idRecipe = com.google.api.client.util.Preconditions.checkNotNull(idRecipe, "Required parameter idRecipe must be specified.");
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      this.idIngredient = com.google.api.client.util.Preconditions.checkNotNull(idIngredient, "Required parameter idIngredient must be specified.");
    }

    @Override
    public AddSpecificIngredientToRecipe setAlt(String alt) {
      return (AddSpecificIngredientToRecipe) super.setAlt(alt);
    }

    @Override
    public AddSpecificIngredientToRecipe setFields(String fields) {
      return (AddSpecificIngredientToRecipe) super.setFields(fields);
    }

    @Override
    public AddSpecificIngredientToRecipe setKey(String key) {
      return (AddSpecificIngredientToRecipe) super.setKey(key);
    }

    @Override
    public AddSpecificIngredientToRecipe setOauthToken(String oauthToken) {
      return (AddSpecificIngredientToRecipe) super.setOauthToken(oauthToken);
    }

    @Override
    public AddSpecificIngredientToRecipe setPrettyPrint(Boolean prettyPrint) {
      return (AddSpecificIngredientToRecipe) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public AddSpecificIngredientToRecipe setQuotaUser(String quotaUser) {
      return (AddSpecificIngredientToRecipe) super.setQuotaUser(quotaUser);
    }

    @Override
    public AddSpecificIngredientToRecipe setUserIp(String userIp) {
      return (AddSpecificIngredientToRecipe) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key("id_recipe")
    private String idRecipe;

    /**

     */
    public String getIdRecipe() {
      return idRecipe;
    }

    public AddSpecificIngredientToRecipe setIdRecipe(String idRecipe) {
      this.idRecipe = idRecipe;
      return this;
    }

    @com.google.api.client.util.Key
    private String id;

    /**

     */
    public String getId() {
      return id;
    }

    public AddSpecificIngredientToRecipe setId(String id) {
      this.id = id;
      return this;
    }

    @com.google.api.client.util.Key("id_ingredient")
    private String idIngredient;

    /**

     */
    public String getIdIngredient() {
      return idIngredient;
    }

    public AddSpecificIngredientToRecipe setIdIngredient(String idIngredient) {
      this.idIngredient = idIngredient;
      return this;
    }

    @Override
    public AddSpecificIngredientToRecipe set(String parameterName, Object value) {
      return (AddSpecificIngredientToRecipe) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "addUser".
   *
   * This request holds the parameters needed by the recipesendpoint server.  After setting any
   * optional parameters, call the {@link AddUser#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.example.carlo.recetapp.recipesendpoint.model.User}
   * @return the request
   */
  public AddUser addUser(com.example.carlo.recetapp.recipesendpoint.model.User content) throws java.io.IOException {
    AddUser result = new AddUser(content);
    initialize(result);
    return result;
  }

  public class AddUser extends RecipesendpointRequest<com.example.carlo.recetapp.recipesendpoint.model.User> {

    private static final String REST_PATH = "addUser";

    /**
     * Create a request for the method "addUser".
     *
     * This request holds the parameters needed by the the recipesendpoint server.  After setting any
     * optional parameters, call the {@link AddUser#execute()} method to invoke the remote operation.
     * <p> {@link
     * AddUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.example.carlo.recetapp.recipesendpoint.model.User}
     * @since 1.13
     */
    protected AddUser(com.example.carlo.recetapp.recipesendpoint.model.User content) {
      super(Recipesendpoint.this, "POST", REST_PATH, content, com.example.carlo.recetapp.recipesendpoint.model.User.class);
    }

    @Override
    public AddUser setAlt(String alt) {
      return (AddUser) super.setAlt(alt);
    }

    @Override
    public AddUser setFields(String fields) {
      return (AddUser) super.setFields(fields);
    }

    @Override
    public AddUser setKey(String key) {
      return (AddUser) super.setKey(key);
    }

    @Override
    public AddUser setOauthToken(String oauthToken) {
      return (AddUser) super.setOauthToken(oauthToken);
    }

    @Override
    public AddUser setPrettyPrint(Boolean prettyPrint) {
      return (AddUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public AddUser setQuotaUser(String quotaUser) {
      return (AddUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public AddUser setUserIp(String userIp) {
      return (AddUser) super.setUserIp(userIp);
    }

    @Override
    public AddUser set(String parameterName, Object value) {
      return (AddUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getIngredient".
   *
   * This request holds the parameters needed by the recipesendpoint server.  After setting any
   * optional parameters, call the {@link GetIngredient#execute()} method to invoke the remote
   * operation.
   *
   * @param idIngredient
   * @return the request
   */
  public GetIngredient getIngredient(String idIngredient) throws java.io.IOException {
    GetIngredient result = new GetIngredient(idIngredient);
    initialize(result);
    return result;
  }

  public class GetIngredient extends RecipesendpointRequest<com.example.carlo.recetapp.recipesendpoint.model.Ingredient> {

    private static final String REST_PATH = "ingredient/{id_ingredient}";

    /**
     * Create a request for the method "getIngredient".
     *
     * This request holds the parameters needed by the the recipesendpoint server.  After setting any
     * optional parameters, call the {@link GetIngredient#execute()} method to invoke the remote
     * operation. <p> {@link GetIngredient#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param idIngredient
     * @since 1.13
     */
    protected GetIngredient(String idIngredient) {
      super(Recipesendpoint.this, "GET", REST_PATH, null, com.example.carlo.recetapp.recipesendpoint.model.Ingredient.class);
      this.idIngredient = com.google.api.client.util.Preconditions.checkNotNull(idIngredient, "Required parameter idIngredient must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetIngredient setAlt(String alt) {
      return (GetIngredient) super.setAlt(alt);
    }

    @Override
    public GetIngredient setFields(String fields) {
      return (GetIngredient) super.setFields(fields);
    }

    @Override
    public GetIngredient setKey(String key) {
      return (GetIngredient) super.setKey(key);
    }

    @Override
    public GetIngredient setOauthToken(String oauthToken) {
      return (GetIngredient) super.setOauthToken(oauthToken);
    }

    @Override
    public GetIngredient setPrettyPrint(Boolean prettyPrint) {
      return (GetIngredient) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetIngredient setQuotaUser(String quotaUser) {
      return (GetIngredient) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetIngredient setUserIp(String userIp) {
      return (GetIngredient) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key("id_ingredient")
    private String idIngredient;

    /**

     */
    public String getIdIngredient() {
      return idIngredient;
    }

    public GetIngredient setIdIngredient(String idIngredient) {
      this.idIngredient = idIngredient;
      return this;
    }

    @Override
    public GetIngredient set(String parameterName, Object value) {
      return (GetIngredient) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getRecipe".
   *
   * This request holds the parameters needed by the recipesendpoint server.  After setting any
   * optional parameters, call the {@link GetRecipe#execute()} method to invoke the remote operation.
   *
   * @param idRecipe
   * @param id
   * @return the request
   */
  public GetRecipe getRecipe(String idRecipe, String id) throws java.io.IOException {
    GetRecipe result = new GetRecipe(idRecipe, id);
    initialize(result);
    return result;
  }

  public class GetRecipe extends RecipesendpointRequest<com.example.carlo.recetapp.recipesendpoint.model.Recipe> {

    private static final String REST_PATH = "recipe/{id_recipe}/{id}";

    /**
     * Create a request for the method "getRecipe".
     *
     * This request holds the parameters needed by the the recipesendpoint server.  After setting any
     * optional parameters, call the {@link GetRecipe#execute()} method to invoke the remote
     * operation. <p> {@link
     * GetRecipe#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param idRecipe
     * @param id
     * @since 1.13
     */
    protected GetRecipe(String idRecipe, String id) {
      super(Recipesendpoint.this, "GET", REST_PATH, null, com.example.carlo.recetapp.recipesendpoint.model.Recipe.class);
      this.idRecipe = com.google.api.client.util.Preconditions.checkNotNull(idRecipe, "Required parameter idRecipe must be specified.");
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetRecipe setAlt(String alt) {
      return (GetRecipe) super.setAlt(alt);
    }

    @Override
    public GetRecipe setFields(String fields) {
      return (GetRecipe) super.setFields(fields);
    }

    @Override
    public GetRecipe setKey(String key) {
      return (GetRecipe) super.setKey(key);
    }

    @Override
    public GetRecipe setOauthToken(String oauthToken) {
      return (GetRecipe) super.setOauthToken(oauthToken);
    }

    @Override
    public GetRecipe setPrettyPrint(Boolean prettyPrint) {
      return (GetRecipe) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetRecipe setQuotaUser(String quotaUser) {
      return (GetRecipe) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetRecipe setUserIp(String userIp) {
      return (GetRecipe) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key("id_recipe")
    private String idRecipe;

    /**

     */
    public String getIdRecipe() {
      return idRecipe;
    }

    public GetRecipe setIdRecipe(String idRecipe) {
      this.idRecipe = idRecipe;
      return this;
    }

    @com.google.api.client.util.Key
    private String id;

    /**

     */
    public String getId() {
      return id;
    }

    public GetRecipe setId(String id) {
      this.id = id;
      return this;
    }

    @Override
    public GetRecipe set(String parameterName, Object value) {
      return (GetRecipe) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getUser".
   *
   * This request holds the parameters needed by the recipesendpoint server.  After setting any
   * optional parameters, call the {@link GetUser#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public GetUser getUser(String id) throws java.io.IOException {
    GetUser result = new GetUser(id);
    initialize(result);
    return result;
  }

  public class GetUser extends RecipesendpointRequest<com.example.carlo.recetapp.recipesendpoint.model.User> {

    private static final String REST_PATH = "user/{id}";

    /**
     * Create a request for the method "getUser".
     *
     * This request holds the parameters needed by the the recipesendpoint server.  After setting any
     * optional parameters, call the {@link GetUser#execute()} method to invoke the remote operation.
     * <p> {@link
     * GetUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetUser(String id) {
      super(Recipesendpoint.this, "GET", REST_PATH, null, com.example.carlo.recetapp.recipesendpoint.model.User.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetUser setAlt(String alt) {
      return (GetUser) super.setAlt(alt);
    }

    @Override
    public GetUser setFields(String fields) {
      return (GetUser) super.setFields(fields);
    }

    @Override
    public GetUser setKey(String key) {
      return (GetUser) super.setKey(key);
    }

    @Override
    public GetUser setOauthToken(String oauthToken) {
      return (GetUser) super.setOauthToken(oauthToken);
    }

    @Override
    public GetUser setPrettyPrint(Boolean prettyPrint) {
      return (GetUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetUser setQuotaUser(String quotaUser) {
      return (GetUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetUser setUserIp(String userIp) {
      return (GetUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private String id;

    /**

     */
    public String getId() {
      return id;
    }

    public GetUser setId(String id) {
      this.id = id;
      return this;
    }

    @Override
    public GetUser set(String parameterName, Object value) {
      return (GetUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listIngredient".
   *
   * This request holds the parameters needed by the recipesendpoint server.  After setting any
   * optional parameters, call the {@link ListIngredient#execute()} method to invoke the remote
   * operation.
   *
   * @return the request
   */
  public ListIngredient listIngredient() throws java.io.IOException {
    ListIngredient result = new ListIngredient();
    initialize(result);
    return result;
  }

  public class ListIngredient extends RecipesendpointRequest<com.example.carlo.recetapp.recipesendpoint.model.IngredientCollection> {

    private static final String REST_PATH = "ingredient";

    /**
     * Create a request for the method "listIngredient".
     *
     * This request holds the parameters needed by the the recipesendpoint server.  After setting any
     * optional parameters, call the {@link ListIngredient#execute()} method to invoke the remote
     * operation. <p> {@link ListIngredient#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @since 1.13
     */
    protected ListIngredient() {
      super(Recipesendpoint.this, "GET", REST_PATH, null, com.example.carlo.recetapp.recipesendpoint.model.IngredientCollection.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListIngredient setAlt(String alt) {
      return (ListIngredient) super.setAlt(alt);
    }

    @Override
    public ListIngredient setFields(String fields) {
      return (ListIngredient) super.setFields(fields);
    }

    @Override
    public ListIngredient setKey(String key) {
      return (ListIngredient) super.setKey(key);
    }

    @Override
    public ListIngredient setOauthToken(String oauthToken) {
      return (ListIngredient) super.setOauthToken(oauthToken);
    }

    @Override
    public ListIngredient setPrettyPrint(Boolean prettyPrint) {
      return (ListIngredient) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListIngredient setQuotaUser(String quotaUser) {
      return (ListIngredient) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListIngredient setUserIp(String userIp) {
      return (ListIngredient) super.setUserIp(userIp);
    }

    @Override
    public ListIngredient set(String parameterName, Object value) {
      return (ListIngredient) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listUser".
   *
   * This request holds the parameters needed by the recipesendpoint server.  After setting any
   * optional parameters, call the {@link ListUser#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public ListUser listUser() throws java.io.IOException {
    ListUser result = new ListUser();
    initialize(result);
    return result;
  }

  public class ListUser extends RecipesendpointRequest<com.example.carlo.recetapp.recipesendpoint.model.CollectionResponseUser> {

    private static final String REST_PATH = "user";

    /**
     * Create a request for the method "listUser".
     *
     * This request holds the parameters needed by the the recipesendpoint server.  After setting any
     * optional parameters, call the {@link ListUser#execute()} method to invoke the remote operation.
     * <p> {@link
     * ListUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected ListUser() {
      super(Recipesendpoint.this, "GET", REST_PATH, null, com.example.carlo.recetapp.recipesendpoint.model.CollectionResponseUser.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListUser setAlt(String alt) {
      return (ListUser) super.setAlt(alt);
    }

    @Override
    public ListUser setFields(String fields) {
      return (ListUser) super.setFields(fields);
    }

    @Override
    public ListUser setKey(String key) {
      return (ListUser) super.setKey(key);
    }

    @Override
    public ListUser setOauthToken(String oauthToken) {
      return (ListUser) super.setOauthToken(oauthToken);
    }

    @Override
    public ListUser setPrettyPrint(Boolean prettyPrint) {
      return (ListUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListUser setQuotaUser(String quotaUser) {
      return (ListUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListUser setUserIp(String userIp) {
      return (ListUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private String cursor;

    /**

     */
    public String getCursor() {
      return cursor;
    }

    public ListUser setCursor(String cursor) {
      this.cursor = cursor;
      return this;
    }

    @com.google.api.client.util.Key
    private Integer limit;

    /**

     */
    public Integer getLimit() {
      return limit;
    }

    public ListUser setLimit(Integer limit) {
      this.limit = limit;
      return this;
    }

    @Override
    public ListUser set(String parameterName, Object value) {
      return (ListUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeRecipe".
   *
   * This request holds the parameters needed by the recipesendpoint server.  After setting any
   * optional parameters, call the {@link RemoveRecipe#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @param idRecipe
   * @return the request
   */
  public RemoveRecipe removeRecipe(String id, String idRecipe) throws java.io.IOException {
    RemoveRecipe result = new RemoveRecipe(id, idRecipe);
    initialize(result);
    return result;
  }

  public class RemoveRecipe extends RecipesendpointRequest<com.example.carlo.recetapp.recipesendpoint.model.User> {

    private static final String REST_PATH = "recipe/{id}/{id_recipe}";

    /**
     * Create a request for the method "removeRecipe".
     *
     * This request holds the parameters needed by the the recipesendpoint server.  After setting any
     * optional parameters, call the {@link RemoveRecipe#execute()} method to invoke the remote
     * operation. <p> {@link
     * RemoveRecipe#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @param idRecipe
     * @since 1.13
     */
    protected RemoveRecipe(String id, String idRecipe) {
      super(Recipesendpoint.this, "POST", REST_PATH, null, com.example.carlo.recetapp.recipesendpoint.model.User.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      this.idRecipe = com.google.api.client.util.Preconditions.checkNotNull(idRecipe, "Required parameter idRecipe must be specified.");
    }

    @Override
    public RemoveRecipe setAlt(String alt) {
      return (RemoveRecipe) super.setAlt(alt);
    }

    @Override
    public RemoveRecipe setFields(String fields) {
      return (RemoveRecipe) super.setFields(fields);
    }

    @Override
    public RemoveRecipe setKey(String key) {
      return (RemoveRecipe) super.setKey(key);
    }

    @Override
    public RemoveRecipe setOauthToken(String oauthToken) {
      return (RemoveRecipe) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveRecipe setPrettyPrint(Boolean prettyPrint) {
      return (RemoveRecipe) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveRecipe setQuotaUser(String quotaUser) {
      return (RemoveRecipe) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveRecipe setUserIp(String userIp) {
      return (RemoveRecipe) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private String id;

    /**

     */
    public String getId() {
      return id;
    }

    public RemoveRecipe setId(String id) {
      this.id = id;
      return this;
    }

    @com.google.api.client.util.Key("id_recipe")
    private String idRecipe;

    /**

     */
    public String getIdRecipe() {
      return idRecipe;
    }

    public RemoveRecipe setIdRecipe(String idRecipe) {
      this.idRecipe = idRecipe;
      return this;
    }

    @Override
    public RemoveRecipe set(String parameterName, Object value) {
      return (RemoveRecipe) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeUser".
   *
   * This request holds the parameters needed by the recipesendpoint server.  After setting any
   * optional parameters, call the {@link RemoveUser#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public RemoveUser removeUser(String id) throws java.io.IOException {
    RemoveUser result = new RemoveUser(id);
    initialize(result);
    return result;
  }

  public class RemoveUser extends RecipesendpointRequest<Void> {

    private static final String REST_PATH = "user/{id}";

    /**
     * Create a request for the method "removeUser".
     *
     * This request holds the parameters needed by the the recipesendpoint server.  After setting any
     * optional parameters, call the {@link RemoveUser#execute()} method to invoke the remote
     * operation. <p> {@link
     * RemoveUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemoveUser(String id) {
      super(Recipesendpoint.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemoveUser setAlt(String alt) {
      return (RemoveUser) super.setAlt(alt);
    }

    @Override
    public RemoveUser setFields(String fields) {
      return (RemoveUser) super.setFields(fields);
    }

    @Override
    public RemoveUser setKey(String key) {
      return (RemoveUser) super.setKey(key);
    }

    @Override
    public RemoveUser setOauthToken(String oauthToken) {
      return (RemoveUser) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveUser setPrettyPrint(Boolean prettyPrint) {
      return (RemoveUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveUser setQuotaUser(String quotaUser) {
      return (RemoveUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveUser setUserIp(String userIp) {
      return (RemoveUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private String id;

    /**

     */
    public String getId() {
      return id;
    }

    public RemoveUser setId(String id) {
      this.id = id;
      return this;
    }

    @Override
    public RemoveUser set(String parameterName, Object value) {
      return (RemoveUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateRecipe".
   *
   * This request holds the parameters needed by the recipesendpoint server.  After setting any
   * optional parameters, call the {@link UpdateRecipe#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @param idRecipe
   * @param content the {@link com.example.carlo.recetapp.recipesendpoint.model.Recipe}
   * @return the request
   */
  public UpdateRecipe updateRecipe(String id, String idRecipe, com.example.carlo.recetapp.recipesendpoint.model.Recipe content) throws java.io.IOException {
    UpdateRecipe result = new UpdateRecipe(id, idRecipe, content);
    initialize(result);
    return result;
  }

  public class UpdateRecipe extends RecipesendpointRequest<com.example.carlo.recetapp.recipesendpoint.model.Recipe> {

    private static final String REST_PATH = "recipe/{id}/{id_recipe}";

    /**
     * Create a request for the method "updateRecipe".
     *
     * This request holds the parameters needed by the the recipesendpoint server.  After setting any
     * optional parameters, call the {@link UpdateRecipe#execute()} method to invoke the remote
     * operation. <p> {@link
     * UpdateRecipe#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @param idRecipe
     * @param content the {@link com.example.carlo.recetapp.recipesendpoint.model.Recipe}
     * @since 1.13
     */
    protected UpdateRecipe(String id, String idRecipe, com.example.carlo.recetapp.recipesendpoint.model.Recipe content) {
      super(Recipesendpoint.this, "PUT", REST_PATH, content, com.example.carlo.recetapp.recipesendpoint.model.Recipe.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      this.idRecipe = com.google.api.client.util.Preconditions.checkNotNull(idRecipe, "Required parameter idRecipe must be specified.");
    }

    @Override
    public UpdateRecipe setAlt(String alt) {
      return (UpdateRecipe) super.setAlt(alt);
    }

    @Override
    public UpdateRecipe setFields(String fields) {
      return (UpdateRecipe) super.setFields(fields);
    }

    @Override
    public UpdateRecipe setKey(String key) {
      return (UpdateRecipe) super.setKey(key);
    }

    @Override
    public UpdateRecipe setOauthToken(String oauthToken) {
      return (UpdateRecipe) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateRecipe setPrettyPrint(Boolean prettyPrint) {
      return (UpdateRecipe) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateRecipe setQuotaUser(String quotaUser) {
      return (UpdateRecipe) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateRecipe setUserIp(String userIp) {
      return (UpdateRecipe) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private String id;

    /**

     */
    public String getId() {
      return id;
    }

    public UpdateRecipe setId(String id) {
      this.id = id;
      return this;
    }

    @com.google.api.client.util.Key("id_recipe")
    private String idRecipe;

    /**

     */
    public String getIdRecipe() {
      return idRecipe;
    }

    public UpdateRecipe setIdRecipe(String idRecipe) {
      this.idRecipe = idRecipe;
      return this;
    }

    @Override
    public UpdateRecipe set(String parameterName, Object value) {
      return (UpdateRecipe) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateUserMainData".
   *
   * This request holds the parameters needed by the recipesendpoint server.  After setting any
   * optional parameters, call the {@link UpdateUserMainData#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.example.carlo.recetapp.recipesendpoint.model.User}
   * @return the request
   */
  public UpdateUserMainData updateUserMainData(com.example.carlo.recetapp.recipesendpoint.model.User content) throws java.io.IOException {
    UpdateUserMainData result = new UpdateUserMainData(content);
    initialize(result);
    return result;
  }

  public class UpdateUserMainData extends RecipesendpointRequest<com.example.carlo.recetapp.recipesendpoint.model.User> {

    private static final String REST_PATH = "user";

    /**
     * Create a request for the method "updateUserMainData".
     *
     * This request holds the parameters needed by the the recipesendpoint server.  After setting any
     * optional parameters, call the {@link UpdateUserMainData#execute()} method to invoke the remote
     * operation. <p> {@link UpdateUserMainData#initialize(com.google.api.client.googleapis.services.A
     * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param content the {@link com.example.carlo.recetapp.recipesendpoint.model.User}
     * @since 1.13
     */

    protected UpdateUserMainData(com.example.carlo.recetapp.recipesendpoint.model.User content) {
      super(Recipesendpoint.this, "PUT", REST_PATH, content, com.example.carlo.recetapp.recipesendpoint.model.User.class);
    }

    @Override
    public UpdateUserMainData setAlt(String alt) {
      return (UpdateUserMainData) super.setAlt(alt);
    }

    @Override
    public UpdateUserMainData setFields(String fields) {
      return (UpdateUserMainData) super.setFields(fields);
    }

    @Override
    public UpdateUserMainData setKey(String key) {
      return (UpdateUserMainData) super.setKey(key);
    }

    @Override
    public UpdateUserMainData setOauthToken(String oauthToken) {
      return (UpdateUserMainData) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateUserMainData setPrettyPrint(Boolean prettyPrint) {
      return (UpdateUserMainData) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateUserMainData setQuotaUser(String quotaUser) {
      return (UpdateUserMainData) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateUserMainData setUserIp(String userIp) {
      return (UpdateUserMainData) super.setUserIp(userIp);
    }

    @Override
    public UpdateUserMainData set(String parameterName, Object value) {
      return (UpdateUserMainData) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Recipesendpoint}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Recipesendpoint}. */
    @Override
    public Recipesendpoint build() {
      return new Recipesendpoint(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link RecipesendpointRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setRecipesendpointRequestInitializer(
        RecipesendpointRequestInitializer recipesendpointRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(recipesendpointRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
